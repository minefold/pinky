#!/usr/bin/env ruby

# buffers the stdin and stdout of a process to named pipes
# this lets you run a process in the background, send stdin
# to it and drain its stdout

require 'optparse'
require 'posix/spawn'
require 'thread'

pipe_directory = working_directory = `pwd`.strip
pid_file, log_file = nil, nil

foreground = false

opts = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($0)} [options] command"

  opts.separator "\nOptions:"
  opts.on("-f", "--foreground", "run in foreground") {
    foreground = true
  }
  opts.on("-d", "--pipe-directory directory", "pipe directory") { |dir|
    pipe_directory = File.expand_path(dir)
  }
  opts.on("-C", "--working-directory directory", "working directory") { |dir|
    working_directory = File.expand_path(dir)
  }
  opts.on("-p", "--pid pid-file", "pid file") { |file|
    pid_file = File.expand_path(file)
  }
  opts.on("-l", "--log-file log-file", "log file") { |file|
    log_file = File.expand_path(file)
  }

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    abort
  end
end

opts.parse!(ARGV)
if ARGV.length == 0
  puts opts
  abort
end

Process.daemon(true) unless foreground
Thread.abort_on_exception = true

command = ARGV.join(' ')

pipe_stdin_file, pipe_stdout_file = "#{pipe_directory}/pipe_stdin",  "#{pipe_directory}/pipe_stdout"

pid, children, stdin_buffer, stdout_buffer = nil, nil, nil, nil

$log = $stderr
if log_file
  $log = File.open(log_file, 'w+')
end
$log.sync = true

class QueuedReader < Queue
  def initialize(io)
    @io = io
    super()
  end

  def start_async!
    Thread.new do
      while output = @io.gets
        push(output)
        $log.puts "#{output}"
      end
      $log.puts "process exited"
      push(:fin)
    end
  end
end

class BufferedPipeWriter
  def initialize(pipe_file)
    @pipe_file = pipe_file
    `rm -f #{@pipe_file}; mkfifo #{@pipe_file}`
  end

  # this blocks until the file is open for reading
  def open_pipe
    pipe = nil

    begin
      pipe = File.open(@pipe_file, 'w')

    rescue Errno::EINTR
      # ignore interrupts from kill signals, we still want to write to buffer
      retry
    end

    pipe.sync = true
    pipe
  end

  # blocking write
  def write(data)
    @io_out ||= open_pipe
    begin
      @io_out.puts(data)
    rescue Errno::EPIPE
      # if the pipe is broken, reopen the file
      @io_out = open_pipe
      retry
    end
  end
end

begin
  pid = Process.pid

  Dir.chdir(working_directory) do
    _, stdin, stdout = POSIX::Spawn::popen4("exec #{command} 2>&1")

    $log.puts "process started with pid=#{pid} wdir=#{working_directory} cmd=#{command}"
    File.write(pid_file, pid) if pid_file

    trap(:TERM) do
      $killing ||= begin
        Thread.new do
          $log.puts "TERM: shutting down"
          begin
            Process.kill(:TERM, 0)
          rescue => e
            $log.puts "#{e.class}:#{e}"
          end
          Process.wait
        end
      end
    end

    # copy stdin
    `rm -f #{pipe_stdin_file}; mkfifo #{pipe_stdin_file}`

    stdin_reader = QueuedReader.new(File.open(pipe_stdin_file, 'r+'))
    stdin_reader.start_async!

    Thread.new do
      while (data = stdin_reader.pop)
        stdin.puts(data)
      end
    end

    # copy stdout
    stdout_reader = QueuedReader.new(stdout)
    stdout_reader.start_async!

    stdout_buf = BufferedPipeWriter.new(pipe_stdout_file)

    while (data = stdout_reader.pop) && data != :fin
      stdout_buf.write(data)
    end
  end
rescue => e
  $log.puts "#{e}\n#{e.backtrace.join("\n")}"
ensure
  $log.puts "cleaning up"
  `rm -f #{pid_file}` if pid_file
  `rm -f #{pipe_stdin_file}`
  # `rm -f #{pipe_stdout_file}`
end